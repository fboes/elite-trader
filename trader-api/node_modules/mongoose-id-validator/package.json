{
  "name": "mongoose-id-validator",
  "version": "0.1.3",
  "description": "Mongoose plugin to validate that ObjectID references refer to objects that actually exist in the referenced collection",
  "author": {
    "name": "Martin Campbell",
    "email": "martin@campbellsoftware.co.uk",
    "url": "http://www.campbellsoftware.co.uk"
  },
  "keywords": [
    "mongoose",
    "objectid",
    "id",
    "validate",
    "validator",
    "exists",
    "mongodb"
  ],
  "homepage": "https://github.com/CampbellSoftwareSolutions/mongoose-id-validator",
  "repository": {
    "type": "git",
    "url": "git://github.com/CampbellSoftwareSolutions/mongoose-id-validator"
  },
  "license": "LGPL-3.0+",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/CampbellSoftwareSolutions/mongoose-id-validator/issues"
  },
  "engine": "node >= 0.4.0",
  "dependencies": {
    "mongoose": "~3.8.0"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec"
  },
  "devDependencies": {
    "async": "~0.2.9",
    "should": "~3.0.1"
  },
  "readme": "## mongoose-id-validator\n\nProvides a mongoose plugin that can be used to verify that a document which references \nother documents by their ID is referring to documents that actually exist.\n\nThis plugin works by performing a count query for documents in the relevant collection with the \nID specified in the document being validated. Note that the validation method is only executed if the ID\nvalue has been updated. This helps prevent unnecessary queries when saving a document if the ID has not been changed.\n\nHowever, please be aware that this will NOT catch any IDs that were valid at the time they were saved but the referenced \ndocument has subsequently been removed. You should have validation logic in your delete/remove code to handle this. \n\n# Usage\n\nInstall via NPM\n\n    $ npm install mongoose-id-validator\n\nThen you can use the plugin on your schemas\n\n```javascript\nvar idvalidator = require('mongoose-id-validator');\n\nvar ManufacturerSchema = new Schema({\n  name : String\n});\nvar Manufacturer = mongoose.model('Manufacturer', ManufacturerSchema);\n\nvar CarSchema = new Schema({\n  name         : String,\n  manufacturer : { \n  \t\t\t\t\ttype: Schema.Types.ObjectId, \n  \t\t\t\t\tref: 'Manufacturer',\n  \t\t\t\t\trequired: true\n  \t\t\t\t  }\n});\nCarSchema.plugin(idvalidator);\nvar Car = mongoose.model('Car', CarSchema);\n\nvar ford = new ManufacturerSchema({ name : 'Ford' });\n\nford.save(function() {\n  var focus = new Car({ name : 'Focus' });\n  focus.manufacturer = \"50136e40c78c4b9403000001\";\n\n  focus.validate(function(err) {\n    //err.errors would contain a validation error for manufacturer with default message\n    \n    focus.manufacturer = ford;\n    focus.validate(function(err) {\n      //err will now be null as validation will pass\n    });\n  });\n});\n```\n\nYou may also use declare a optional refConditions method in your schema. For example:\n```javascript\nvar OtherSchema = new Schema({\n  referencedId : { \n  \t\t\t\t\ttype: Schema.Types.ObjectId, \n  \t\t\t\t\tref: 'RefSchema',\n  \t\t\t\t\trefConditions: {\n  \t\t\t\t\t  field1: 123\n  \t\t\t\t\t}\n  \t\t\t\t  }\n});\n```\n\nThe referenceId value in the code above would only pass validation if the object with this ID exists AND had a property \n'field1' that has the value 123. If any conditional property does not match then it would not pass validation.\n\nYou can also use this plugin to validate an array of ID references. Please note as above that the implementation\nruns a single count query to keep the performance impact to a minimum. Hence you will know if there is a\nbad ID value in the array of references but not which one it is.\n\nPlease note that refConditions CANNOT be used with an array of ID references, only when referencing a single ID value.\n \nAn example of this is below:\n```javascript\nvar idvalidator = require('mongoose-id-validator');\n\nvar ColourSchema = new Schema({\n  name : String\n});\nvar Colour = mongoose.model('Colour', ColourSchema);\n\nvar CarSchema = new Schema({\n  name         : String,\n  colours\t   : [{ \n  \t\t\t\t\ttype: Schema.Types.ObjectId, \n  \t\t\t\t\tref: 'Colour'\n  \t\t\t\t  ]}\n});\nCarSchema.plugin(idvalidator);\nvar Car = mongoose.model('Car', CarSchema);\n\nvar red = new Colour({ name : 'Red' });\nvar blue = new Colour({ name : 'Blue' });\n\nred.save(function() {\n  blue.save(function() {\n    var focus = new Car({ name : 'Focus' });\n    focus.colours = [red, \"50136e40c78c4b9403000001\"];\n\n    focus.validate(function(err) {\n      //err.errors would contain a validation error for colours with default message\n    \n      focus.colours = [red, blue]\n      focus.validate(function(err) {\n        //err will now be null as validation will pass\n      });\n    });\n  });\n});\n```\n\n## Options\n\n```javascript\nModel.plugin(id-validator, {\n  /* Custom validation message with {PATH} being replaced \n  * with the relevant schema path that contains an invalid \n  * document ID.\n  */\n  message : 'Bad ID value for {PATH}'  \n});\n```\n\n# Tests\n\nTo run the tests install mocha\n\n    npm install mocha -g\n\nand then run (with a local MongoDB instance available)\n\n    npm test\n    \n# Issues\n\nPlease use the GitHub issue tracker to raise any problems or feature requests.\n\nIf you would like to submit a pull request with any changes you make, please feel free!\n    \n# Legal\n\nCode is Copyright (C) Campbell Software Solutions 2014.\n\nThis module is available under terms of the LGPL V3 license. Hence you can use it in other proprietary projects \nbut any changes to the library should be made available.      \n",
  "_id": "mongoose-id-validator@0.1.3",
  "dist": {
    "shasum": "caed603326f30df4782b745496132327693b3222"
  },
  "_from": "mongoose-id-validator@",
  "_resolved": "https://registry.npmjs.org/mongoose-id-validator/-/mongoose-id-validator-0.1.3.tgz"
}
